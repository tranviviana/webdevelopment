the why React 
    - makes UI easier through being a JS library
    - components point to some html
    - declarative, component-based (encapsulation of more and more stuff)
JSX props
    - props: arguments to a function EXTERNAL
        - what it takes in - good for less changes like displaying a name
    - state: what is already INSIDE a component
        - rerenders when made - good for updates like counters
State-React Hooks
    - Use-State 
        - to start npx create-react-app .
        - npm start to start the application 
        - can only be used in FUNCTION components NOT class components
        - always execute in sequential order --> hooks must be called in the exact same order in every component render
        -useState(starting_point)
        - return const [count, setCount] = useState(starting point) first is the current state and the second is the function that is happening to it setCount(what is happening to number)
        - setCount(prevCount => 
      prevCount + 1) ---- use function version or it wont work properly
      - can have starting point be a function version as well useState () => {
        console.log('run function')
        return 4
      } --- this version when wanted to be run ONCE
useEffect - react Hook
    - query json api
    - import React, {useEffect} from 'react'
    - useEffect (() = {
        console.log('blah'), [resourceType]
    })
        - first is what happens, second is the thing we are looking to that is changing
        - empty [] will give you onMount 
        - useEffect(() => {
            fetch (`https://json) .then (respone => response.json(()) . then (json => setItems(json)), [resourceType])
        })
        - event listener and then clean up!
         useEffect(() => {
            console.log()
            return () => {
                console.log("done")
            }
        
         }, [listening to these changes])
Strict Mode 
    -In index it has strictmode React.strictmode
        - really only is affected in development
        - React = render and commit stages everything run twice
    - certain function will be cut out if deprecated 

